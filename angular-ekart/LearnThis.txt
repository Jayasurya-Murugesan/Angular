Angular is JS framework for creating SPA
    to reduce server calls
    to create dynamic content
    content will be changed by JS

components will be bundeled and injected into index.html file, when ng serve started

app-root == app component

component has 4 files -  style, html, ts, spect.ts -unit testings

component - 
    create class 
    decorate with @Component decorator
        selector -app-root - used as html tag - below will be rendered
        template - html file
        style - css file
===========================================================================================================================================
Folder Strucutre
================

Node Modules -
    third part libraries stored, which are downloaded by npm
    do not push this to git
    when npm install is entered in terminal, all necessary packages will be downlaoded into node Modules
    it knows from package.json file

package.json - 
    project configuration
    name, version, scripts
    in dependencies and dev-dependencies all necessary libraries are configured

editor.config
    standard rules to be followed in development, coding rules

git.ignore
    to configure, the files that should not be ignored while pushing to repository

angular.json
    angular related configuration - which file to be loaded when page is loaded, proj name

package-lock.json
    records all verions of dependencies, and sub dependencies

tsconfig.json
    settings for compiling TS to JS

src foler
    contains all source code - components

app folder - 
    application folder 
    services, components , Modules
    all angular apps, will have one component and one Modules

assests - icon, files -only this is publicall accessible
favion.icon - icon file

index.html - main view file, all dependencies JS injected during ng serve

main.ts - 
    starting point of application
    boostrapping app module 

style.css
    global css
===========================================================================================================================================
5.Booststraping
===============
    is a process of initializing or loading the angular application
    Angular proj -> loads index.html (app-root tag)

ng serve - 
    compile app in the memory and directly starts it
    compiles the code and generate bundle and inject into index
    ng build -> in dist - index.html -> script files injected in this
    runtime.js - webpack runtime file
    polfills- for modern browser support
    main.js - js of application
    vendor.js -> angular lib and thir party lib
    styles.csss converted to js and injected
    webpack - bundler- scan multiple js into one or more bundle js and inject to html

angular.json - > configures entry point of app ->main "main": "src/main.ts"

app.module - root module

Angular Proj -> index.html -> angular.json -> main.ts -> app.module.ts -> app.component.ts -> view template (html file)
===========================================================================================================================================
6. TypeScript
=============
    superset of JS - anything in JS, also be in TS
    compiled to JS
    for typesafety
    browser wont undestand/exectue TS only JS
    avoid error while developing or in developing time
    has type inference
    object-oriented feature
===========================================================================================================================================
7. components
=============
    is a piece of site
    app has atleast one component
    angular app is tree of components - combining this makes app
    app component -> Nav component -> (Home component + About component+ contact component)
creating
    creat a TS class and export it
    decorate tht class with @component decorator add selector and view template
    declare the class in main module file
    child component should be in parent component folder
===========================================================================================================================================
8.View template
================
    is a form of html that tells angular how to render the component
    template or templateURL
===========================================================================================================================================
9. style
=============
    -> styles : ['a{text-decoration:none;}',other element]
        cant locate error
        less maintainable
    -> styleUrls : ['./header.component.css']

when we add style to a Component only that component will get styld, child component wont be affected by this
===========================================================================================================================================
10. apply css style Globally
============================
    add style in style.css

===========================================================================================================================================
11. Using Bootstraps
====================
    in terminal -> npm i --save Bootstraps
    -> add path in angular.json 
        "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css"
            ]
    -> or @import in css file
    to uninstall -> npm uninstall bootstrap and remove it in angular.json file
===========================================================================================================================================
12. Create component using CLI
===============================
    ng generate component component-name
===========================================================================================================================================
13. Types of Component selector
===============================
we can use selector like a
    HTML tag -> selector : 'app-root'   -> Mostly used
    HTML attribute -> selector : '[app-root]'  -> for angular directives
    CSS class -> selector : '.app-root'
    CSS id -> selector : '#app-root'
===========================================================================================================================================
14. Data Binding
================
    flow of data 
    Allows to communicate between a component class and its corresponding view template
    1.one way 
        from component to view 
            -> string interpolation {{data}}
            -> propety binding [propety]=data [src]="varName"
        from view to component
            -> event binding (data)="expression"
    2.two way 
        from component to view AND view to component. its combination of propert and event binding
            -> [(ngModel)]
===========================================================================================================================================
15. String interpolation
========================
    {{getPrice()}}
    {{'Rs'+product.price * 30/100}}
    {{product.price>0 ? 'costly':'cheap'}}
===========================================================================================================================================
16. Property binding
===================
    lets us bind a propety of a DOM object
    it can let us show or hide DOM element or manipulate it
    [src]="product.images"  or bind-src="product.images"
attirbute binding - 
    attirbute - do not change dynamically - class, id , href
    [attr.aria-hidden]="true"
===========================================================================================================================================
17. Event Binding
=================
    flow of data from view template to component class
    (HTMLProperty)="method()"
    $event is created. to get value -> event.target.value
    input -> (input)=""
    button -> (click)=""
===========================================================================================================================================
18. Two way data Binding
=================
    combination of property binding and event binding
    or ngModel [(ngModel)]="PropName"
    for using ngModule -> import and register FormsModule in module.ts since its a third party library
===========================================================================================================================================
19. Understanding Directives
============================
    instructions to DOM to 
        manipulate
        change behaviour
        add/remove/DOM
    Types
        component - angular component, it is the only directive with template
        Attribute - change behaviour/appearance of DOM element, does not add/remove element - ngStyle and ngClass
        Structural - add/remove DOM element. ngIf, ngFor, ngSwitch. need to use asterix before this
    @Directive({
        selector : '[atttributSelector]'
    }) export class name{}
    <div atttributSelector >something</div>
===========================================================================================================================================
20. ngFor
=========
    iterates over a collection of data and creates an HTML element for each of the item from a HTML template
    strucutral directive
===========================================================================================================================================
21. Rendering Complex Types
===========================
    *ngFor="let prod of products" 
    let i=index;
===========================================================================================================================================
22. ngIf
========
     *ngIf="condition"
===========================================================================================================================================
23.  ngStyle
============
    attribut directive
    allows to set inline style in html element using expression
    [ngStyle]="{fontWeight:'bold', color: prod.is_in_inventory?'green':'red}
    for adding style dynamically
    change look or behaviour of an element
===========================================================================================================================================
24. ngClass
===========
    attribute directive
    add or remove css class
    [ngClass]="{'btn':true, 'btn-search': searchText,'btn-search-disabled':!searchText}
    class name write a typescript which returns boolean
    falsy values = 0, null, undefined, '', false
===========================================================================================================================================
25. @Input: Custom Property Binding
=========================== 
    communicate between 2 component
    passing data from parent component to child component
Product-list (parent) <app-product [product]="">
product (child) @input() Product;
===========================================================================================================================================
26. Understanding @Input decorator
==================================
    custom proerty binding is when we bind properties of a componenet class to some TypeScript expression in html template
    pass data from parent to child
    @Input() decorator on property in child class
    use this property as attribute and assign data in where we use selector of the child component
===========================================================================================================================================
27. @Output custom event binding
================================
    pass data from child to parent component
    @Output() in child component's property
===========================================================================================================================================
28. Non-Related Component Communication
======================================= 
    for passing data between sibling component or non related component
    combination of custom property and event binding
===========================================================================================================================================
29. Template Reference Variable 
=========================== 
    is a variable stores Reference to a DOM element, component or directive on which it is used
    create a ref var with #text
    when we use it no need for #
===========================================================================================================================================
30. Reference Variable on Component
===================================
    in component create a ref 
    <prod-list #productListComponent></prod-list>
    <product-detail *ngIf="productListComponent.selectedProduct"></product-detail>
===========================================================================================================================================
31. ViewChild() in Angular
=========================== 
    @ViewChild decorator is used to query and get a Reference of the DOM element in the component (within compo\nenet)
    it returns first matching element
    @ViewChild('searchInput') searchInputElement;
    this.searchText = this.searchInputElement.nativeElement.value;
    optional param - 
        read - Used to read a different token from the queried elements.
        static - True to resolve query results before change detection runs, false to resolve after change detection. Defaults to false.
    ngOnInit will be called after all properties are initialzed
===========================================================================================================================================
32. ViewChildren() in Angular
=============================
    to get ref of DOM element
    returns a list of matching element which matches with selector
    create a ref var in template #inputEl
    in its component class => @ ViewChildren('inputEl') inputElement:QueryList<ElementRef>
    we have optional param
    there is no static
    only intialized after change detection runs, not work in ngOnInit
===========================================================================================================================================
33 ng-template in Angular
=========================== 
    an angular element which wraps an HTML snippet
    can be used like template and rendered in DOM
    <ng-template #refVar>
        <p>test</p>
    </ng-template>
    <div *ng-templateOutlet="refVar"></div> --instead of this element, refVar will be rendered (only p tag)
    instead of div in this, we can use ng-ccontainer
===========================================================================================================================================
34 ng-container in Angular
=========================== 
    holds structural directives without adding new elements to the DOM
    allows multiple structural directive
    <ng-container *ngIf="property">
        <button (click)="method">button</button>
     <ng-container>
===========================================================================================================================================
35 ng-content in Angular
========================
    to write between angular component tag and render it
    in base html add <ng-content></ng-content> and where we useing the component replace ng-content with a text or html
    content projection - passing html from parent component to child componenet
    to differenciate 2 passed values <ng-content select=".class-button">
    child component -> template:    '<h2>something</h2>    
                                        <ng-content></ng-content>
                                    <p>somehting</p>'
    parent template ->  <app-child>
                            <p>this will be projected</p>
                        </app-child>
===========================================================================================================================================
36 ContentChild() in Angular 
============================
    using html component of 
    used to access a Reference of a DOM element or a component or directive from the projected content in the child component class
    create a ref in parent componenet <app-kart #ref><p>aonf</p>
in child class
    @contentChild('ref')
    paraRef:ElementRef;
===========================================================================================================================================
37. ContentChildren() 
=====================
    used to access  ALL matching Reference of a DOM element or a component or directive from the projected content in the child  child component class
    in child component class based on the given selector
    @ContentChildren('para') paraElement :QueryList<ElementRef>
===========================================================================================================================================
38. Component initializing
==========================
    when we use selector in template, constructor of that class is called
    implecit parameterless constructor
    explicit - constructor(){}
    when constructor is class value for input is assigned with initial value, not the value passed from parent class
    when constructor is called, 
        input properties are not updated and not available
        child componenet of the componenet is not constructed
        projected content will not be available
    once component is removed from DOM, we can say componenet is destroyed
    app starts - creates and render root componenet
    then it creates and renders child componenet -> forms a tree of components
    once angular loads the component it starts the process fo rendering view
    to do this, it needs to check the input properties, evaluate the data binding and expressions and render the projected content
    angular then also removed the component from the DOM, when no longer needed
    angular lets us know when theses events happens using life cycle hook
life cycle hooks are methods that angular invokes on directive or a component when they create/update or destroy them
    ngOnChanges, ngOnInit, ngDoCheck, ngAfterContentInit, ng AfterConetentChecked, ngAfterViewInit, ngAfterViewChecked, ngDestroy
===========================================================================================================================================
39.ngOnChanges
===========
    Change detection is mechanism by which, angular keeps the view template in symc with the componenet class
    change detection cycle happens when,
        http req made
        DOM event happens
        time events happens
        @input propety updated and later its changes
    first life cycle hook
    it gets executed at the start when a new componenet is created and its input bound properties are updated
    interface - OnChanges
    ngOnChanges(changes:SimpleChanges){}
    if there is no changes in previous value and current value, this wont get called
    for arrays ref is stored, so ngOnChanges hook wont be called again. if ref change, ngOnChanges will get invoked
===========================================================================================================================================
40.ngOnInit
===========
    called after OnChanges is called and completed
    invoked only on first change cycle detecgtion
    called once
    best for initializing variable
    interface OnInit
    when this is called, child component or projected content or view are not available
    so property decorated with @ViewChild, @ViewChildren, @contentChild, @ContentChildren will not be available to use
===========================================================================================================================================
41. ngDoCheck
=============
    called after ngOnChanges and ngOnInit
    invoked on every change detection cycle, even if there is no change in input bound properties
    ex - button clicked but that btn doesnt do anything, in this case also it will get invoked
    when angular fails to detect an change made to input bound properties, we can use this to implement custom change detection
    interface - DoCheck
===========================================================================================================================================
42. ngAfterContentInit
======================
    called after ngDoCheck
    called after components projected content has been full initialzed and injected into ng-content in child component's template
    interface - AfterContentInit
    even if we dont have projected content, it will get called
    just before this called, properties with contentChild, ContentChildren will be initialized
    called once during first change detection cycle. after that if projected content changes, this will not get called
    component only not directive class
===========================================================================================================================================
43. ngAfterContentChecked
===================
    called during every change detection cycle, even if there is no change
    called after angular has finished initializing and chcecking projected content
    before raising this hook, properties decorated with @contentChild and @ContentChildren are updated
    this hook is raised even if there is no projected content in the component
    called whenever the projected content is initialized and checked and updated
    this and above are component only not directive
===========================================================================================================================================
44. ngAfterViewInit
=========================== 
    called after the components view template and all its child component view template are full initialized
    interface - ngAfterViewInit
    called once
    before this hook is called, properties decorated with ViewChild and ViewChildren are updated
    called once during first change detection cycle
    when this hook called, all the life cycle hooks of child component and its directive are executed/ processed 
    and child componet is completel ready
    this hook is componenet only hook, cant use it in directive
===========================================================================================================================================
45. ngAfterViewChecked
======================
    gets called after it checks and updates the components view template and its child components view templates
    called during first change and following cycles, even if there is no change in view
    whenever a view of component or child componenet changed
    this is componenet onl, not on directive
    when this hook called, all the life cycle hooks of child component and its directive are executed/ processed 
    angular updates properties with @viewChild and @Viewchildren before this
===========================================================================================================================================
46. ngOnDestroy
===============
    called just beofre component is removed from DOM
    cleanup - unsubscribe, detach event handler
    last hook
===========================================================================================================================================
47. Custom Attribute Directive
==============================
    Attribute - change the behaviour of element
    create a file like -
        @Directive({ selector: '[setBackround]' })
        export class SetBackground {
        constructor(element: ElementRef) {
            element.nativeElement.style.backgroundColor = 'red'
        }
    register in app.module
    in view <span setBackround>{{product.category}}</span>

}
===========================================================================================================================================
48. Render 2
=========================== 
    do not update DOM directly using native element 
    view template, change detection cycle are by passed
    script injection attack
    creates a layer abstraction between DOM and code for change
        @Directive({ selector: '[setBackround]' })
        export class SetBackground {
            constructor(private element: ElementRef, private renderer: Renderer2) {}
        ngOnInit() {
            this.renderer.setStyle(this.element.nativeElement, 'color', 'white');
        }}
===========================================================================================================================================
49. @hostlistener
=================
    directive listens to DOM even on the host element, if an changes it will react by executing event handler function
    ng g d directiveName
    @HostListener('mouseout')
    OnMouseOut() {
        this.renderer.removeClass(this.element.nativeElement, 'hightlight-product')
    }
===========================================================================================================================================
50. @HostBinding
================
    decorator binds a host elemts property to a property of a directive or a component class
    @HostBinding('style.backgroundColor') backgroundColor: string = 'pink';
===========================================================================================================================================
51. Property Binding vs HostBinding
===================================
    1. in html [value]="varName" (focus)='log'
    2. in directive @HostBinding propName=''
       @hostlistener('focus')log(){}
===========================================================================================================================================
52. Propert binding in directives
================================ 
    in ts Input() inputprop=''
    in html [inputProp]="'val'"
    if prop name is ts and property name of element is same (text of span), ts will be prioratized
    @input('directiveName')obj:{'prop1','prop2'}
    in html <p [directiveName]={prop1:'val1',prop2:'val2'}>
===========================================================================================================================================
53. Conditional attibute Directive
==================================
 using directive Conditionally
 use setter in @Input()

 @Input() set disableProduct(disable: boolean) {
        if (disable) {
            this.renderer.addClass(this.element.nativeElement, 'disable-prod')
        }
    }
===========================================================================================================================================
54. Custom class directive
========================== 
    propert name cannot have -
    [ngClass]={cssClass:true}
    selector has to present to add prop on the hosst element
    if selector and prop name same we can use it like [className]={}
===========================================================================================================================================
55. Custom Style Directive
========================== 
    [ngStyle]={backgroundColor: active?'green':'red'}
    @Input('selecctorName') set propName (style:objects){}
===========================================================================================================================================
56. Structural directive
========================
    behind the scenes, for *ngIf='', agular will, 
        create a ng-template 
        move the content to this 
        add [ngIf]='' or [ngIfElse]=''
===========================================================================================================================================
57. Custom Structural directive
=============================== 
    inject templateRef [view], viewContainerRef [ref of ng template]
    this.viewContainerRef.createEmbededView(this.templateRef)
    this.viewContainerRef.clear();
===========================================================================================================================================
58. ngSwitch Directive
======================
    Structural directive
    [ngSwitch]="PropName" outer div
    *ngSwitchCase="PropValue"
    *ngSwitchDeftault 
===========================================================================================================================================
59. View Encapsulation
======================
    Hiding data and behaviour from outside world
    componenet CSS styles are encapsulted into the components view and do not effect the rest of the application 
    can be added in componenet class under styleUrls
    ViewEncapsulation.None -no Encapsulation
    ViewEncapsulation.Emulated - angular add unique attribute to html element <button attr_something=""> CSS - .button[attr_something]
    ViewEncapsulation.ShadowDOM - creates a seperate DOM, does not get affected by main DOM
===========================================================================================================================================
60. Service in Angular
======================
    Business logic in one service file that can be referenced in other components
    can use this to pass data between two unrelated components
===========================================================================================================================================
61. Creating & Using Services
============================= 
        Services folder
        name.service.ts
        export class NameService{
            method(){}
        }
        in components -> let serviceObj=new NameService();
        serviceObj.method();

===========================================================================================================================================
62. Dependency injection
======================== 
    providing dependencies using external sources rather than creating the instance of dependencies
    when we provide a service on multiple components each component get its own instance of that service
    in @componenet provider: [ServiceName]
    export class HeaderComponent{
        serviceObj=ServiceName;
        constructor(serviceObj:ServiceName){
            this.serviceObj=serviceObj;
        }
    }

    or
    subService=Inject(ServiceName);
===========================================================================================================================================
63. Hierarchical Dependency Injection
===================================== 
    when we provide a dependency on component, same instance will be given to a component and all its child and its child component
    to implement this just remove provider array in its child component
    Dependency override - child component's provider will override parent component's provider
    Root componenet - when we provide a Dependency on root component same instance of that dependency is injected to all components directive and services
    Module Injector - we can also inject service from module class. in this case same instance of the dependency will be available throughout the app (singleton)
===========================================================================================================================================
64. Hierarchical Injection Practical Use Case
=========================== 
    implement provider at module level so that data from services will be same for throughout the app
    if we have multiple provider for same service it will get overriden from parent to child and we loose the data
===========================================================================================================================================
65. Injecting Service into Another Service
==========================================
    @Injectable()
    export class UserService{}

    add dependent class in app module provider array 

    or @Injectable({
        ProvidedIn:'root'
    })
    no need to add it in provider array in the app module
    in all services add @Injectable as recommended by angular
===========================================================================================================================================
66. Angular Injection Token
=========================== 
    in app module
    [UserService]-> {
                        provide:'USER_SERVICE', 
                        useClass:UserService
                    }
    provide - stores unique identifier(token), it can be string or token
    useClass - which class needs to be instantiated for token
    if we mention like above, in constructor injection -> @Inject('USER_SERVICE')
    or export const USER_TOKEN = new InjectionToken<UserService>{'USER_SERVICE'}
    {provide:USER_TOKEN ,useClass:UserService}
     @Inject(USER_TOKEN)
===========================================================================================================================================
67. Component Interaction using Services
========================================
    in an event bind a method
    in that method call event
    that event will emit the data
    in other component ngOnInit subscribe to the event and using call back get datat (data:user)=>{this.prop =data}
===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================
=========================== 

===========================================================================================================================================


